// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News.Api.Data;

#nullable disable

namespace News.Api.Data.Migrations
{
    [DbContext(typeof(NewsDbContext))]
    [Migration("20250829134008_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0568ed49-1aea-4e72-b562-4eb4d2064942"),
                            CreatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6770),
                            Description = "Latest technology news and updates",
                            Name = "Technology",
                            UpdatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6772)
                        },
                        new
                        {
                            Id = new Guid("bff3bd98-2a81-4f86-a341-c449be98ec8e"),
                            CreatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6786),
                            Description = "Sports news and updates",
                            Name = "Sports",
                            UpdatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6786)
                        },
                        new
                        {
                            Id = new Guid("0acc2856-1446-4d15-9e6f-1d2dfe492c95"),
                            CreatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6795),
                            Description = "Political news and analysis",
                            Name = "Politics",
                            UpdatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6796)
                        },
                        new
                        {
                            Id = new Guid("903fc465-c2ae-4e36-9158-2e2e6620fdfe"),
                            CreatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6931),
                            Description = "Health and wellness news",
                            Name = "Health",
                            UpdatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6932)
                        },
                        new
                        {
                            Id = new Guid("3c96169f-9cf6-463c-8f77-1c24743dd96b"),
                            CreatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6941),
                            Description = "Entertainment and celebrity news",
                            Name = "Entertainment",
                            UpdatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(6941)
                        });
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("News.Api.Models.Entities.CollectionArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CollectionId", "ArticleId")
                        .IsUnique();

                    b.ToTable("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e33a4ee-5859-4e72-9b6a-5c8e94cba60b"),
                            CreatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(7839),
                            Email = "admin@newsapi.com",
                            FirstName = "Admin",
                            LastName = "User",
                            Password = "Admin123!",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 8, 29, 13, 40, 7, 272, DateTimeKind.Utc).AddTicks(7839),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("News.Api.Models.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailFrequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique();

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.HasOne("News.Api.Models.Entities.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("News.Api.Models.Entities.CollectionArticle", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Article", "Article")
                        .WithMany("CollectionArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News.Api.Models.Entities.Collection", "Collection")
                        .WithMany("CollectionArticles")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("News.Api.Models.Entities.UserSubscription", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Category", "Category")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("News.Api.Models.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.Navigation("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.Navigation("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
