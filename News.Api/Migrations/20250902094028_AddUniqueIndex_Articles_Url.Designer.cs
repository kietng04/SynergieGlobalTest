// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News.Api.Data;

#nullable disable

namespace News.Api.Migrations
{
    [DbContext(typeof(NewsDbContext))]
    [Migration("20250902094028_AddUniqueIndex_Articles_Url")]
    partial class AddUniqueIndex_Articles_Url
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3cd174d-50ca-4502-ab1b-c763d8c83f71"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9106),
                            Description = "Business news, finance, and market updates",
                            Name = "business",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9107)
                        },
                        new
                        {
                            Id = new Guid("f1546bb2-0ec1-4710-9a88-644802ff28cd"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9110),
                            Description = "Entertainment and celebrity news",
                            Name = "entertainment",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9111)
                        },
                        new
                        {
                            Id = new Guid("97906494-dc73-475b-9186-4a8dbc635bfb"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9117),
                            Description = "General news and top stories",
                            Name = "general",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9118)
                        },
                        new
                        {
                            Id = new Guid("8aabf37d-3583-4282-88a7-ab786a9ad554"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9121),
                            Description = "Health and wellness news",
                            Name = "health",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9122)
                        },
                        new
                        {
                            Id = new Guid("3afc3bfe-6b0b-42f9-9327-7ffd687e4c44"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9125),
                            Description = "Science news and discoveries",
                            Name = "science",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9126)
                        },
                        new
                        {
                            Id = new Guid("c662bd8a-18c3-4ecd-8bcc-53a0000dc870"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9129),
                            Description = "Sports news and updates",
                            Name = "sports",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9129)
                        },
                        new
                        {
                            Id = new Guid("47784c4e-6898-4404-9759-ea0e5a12e44e"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9176),
                            Description = "Latest technology news and updates",
                            Name = "technology",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9176)
                        });
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("News.Api.Models.Entities.CollectionArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CollectionId", "ArticleId")
                        .IsUnique();

                    b.ToTable("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5441138-1397-46e0-a267-fa6ea40818a5"),
                            CreatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9435),
                            Email = "admin@newsapi.com",
                            FirstName = "Admin",
                            LastName = "User",
                            Password = "Admin123!",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 9, 2, 9, 40, 27, 252, DateTimeKind.Utc).AddTicks(9436),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("News.Api.Models.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailFrequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique();

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.HasOne("News.Api.Models.Entities.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("News.Api.Models.Entities.CollectionArticle", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Article", "Article")
                        .WithMany("CollectionArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News.Api.Models.Entities.Collection", "Collection")
                        .WithMany("CollectionArticles")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("News.Api.Models.Entities.UserSubscription", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Category", "Category")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("News.Api.Models.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.Navigation("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.Navigation("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
