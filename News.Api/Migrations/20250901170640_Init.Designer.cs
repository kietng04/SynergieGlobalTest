// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News.Api.Data;

#nullable disable

namespace News.Api.Migrations
{
    [DbContext(typeof(NewsDbContext))]
    [Migration("20250901170640_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e870c5d1-60ba-4285-a5e5-8730c77d7525"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7203),
                            Description = "Business news, finance, and market updates",
                            Name = "business",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7204)
                        },
                        new
                        {
                            Id = new Guid("5bce9273-1b44-43c2-be94-042861f5440b"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7207),
                            Description = "Entertainment and celebrity news",
                            Name = "entertainment",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7207)
                        },
                        new
                        {
                            Id = new Guid("b76ecde9-d202-4434-9931-6fa01db605b3"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7212),
                            Description = "General news and top stories",
                            Name = "general",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7212)
                        },
                        new
                        {
                            Id = new Guid("12b1061f-00a4-4ac8-8b5f-2fa95e1cd0c0"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7215),
                            Description = "Health and wellness news",
                            Name = "health",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7215)
                        },
                        new
                        {
                            Id = new Guid("00b8c8aa-bc4a-4ce6-b06b-5eba48a5701b"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7217),
                            Description = "Science news and discoveries",
                            Name = "science",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7217)
                        },
                        new
                        {
                            Id = new Guid("ade80a31-16ee-4dd1-9aa5-95279f2f218d"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7220),
                            Description = "Sports news and updates",
                            Name = "sports",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7220)
                        },
                        new
                        {
                            Id = new Guid("6e2c6859-8d25-4596-8665-ec0f6243609f"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7222),
                            Description = "Latest technology news and updates",
                            Name = "technology",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7223)
                        });
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("News.Api.Models.Entities.CollectionArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CollectionId", "ArticleId")
                        .IsUnique();

                    b.ToTable("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a966293-91e7-4ff1-a08e-ad4b4cd94f94"),
                            CreatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7398),
                            Email = "admin@newsapi.com",
                            FirstName = "Admin",
                            LastName = "User",
                            Password = "Admin123!",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 9, 1, 17, 6, 40, 141, DateTimeKind.Utc).AddTicks(7399),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("News.Api.Models.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailFrequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique();

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.HasOne("News.Api.Models.Entities.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("News.Api.Models.Entities.CollectionArticle", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Article", "Article")
                        .WithMany("CollectionArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("News.Api.Models.Entities.Collection", "Collection")
                        .WithMany("CollectionArticles")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("News.Api.Models.Entities.UserSubscription", b =>
                {
                    b.HasOne("News.Api.Models.Entities.Category", "Category")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("News.Api.Models.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Article", b =>
                {
                    b.Navigation("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("News.Api.Models.Entities.Collection", b =>
                {
                    b.Navigation("CollectionArticles");
                });

            modelBuilder.Entity("News.Api.Models.Entities.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
